import streamlit as st
import pandas as pd
import requests
import time
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
API_CONFIG = {
    "coingecko": {
        "url": "https://api.coingecko.com/api/v3",
        "rate_limit": 10
    },
    "binance": {
        "url": "https://api.binance.com/api/v3",
        "rate_limit": 1200
    },
    "blockchain": {
        "url": "https://blockchain.info/ticker",
        "rate_limit": 60
    },
    "cbr": {
        "url": "https://www.cbr-xml-daily.ru/latest.js",
        "rate_limit": 60
    }
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
API_CACHE = {
    "btc_price": {"value": None, "timestamp": None, "expires": 300},
    "usd_rub": {"value": None, "timestamp": None, "expires": 3600},
    "mining_data": {"value": None, "timestamp": None, "expires": 600}
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state
if 'saved_results' not in st.session_state:
    st.session_state.saved_results = {}

if 'current_results' not in st.session_state:
    st.session_state.current_results = None

if 'scenarios' not in st.session_state:
    st.session_state.scenarios = []

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API ---
def get_cached_data(key):
    """–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –µ—Å–ª–∏ –æ–Ω–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã"""
    if API_CACHE[key]["value"] and API_CACHE[key]["timestamp"]:
        elapsed = time.time() - API_CACHE[key]["timestamp"]
        if elapsed < API_CACHE[key]["expires"]:
            return API_CACHE[key]["value"]
    return None

def set_cached_data(key, value):
    """–û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à–µ"""
    API_CACHE[key]["value"] = value
    API_CACHE[key]["timestamp"] = time.time()

def fetch_with_fallback(urls, parse_funcs):
    """–ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    for url, parse_func in zip(urls, parse_funcs):
        try:
            response = requests.get(url, timeout=5)
            response.raise_for_status()
            if response.status_code == 200:
                data = parse_func(response.json())
                if data is not None:
                    return data
        except:
            continue
    return None

def get_btc_price():
    """–ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å BTC —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±–∏—Ä–∂"""
    cached = get_cached_data("btc_price")
    if cached:
        return cached
    
    sources = [
        f"{API_CONFIG['coingecko']['url']}/simple/price?ids=bitcoin&vs_currencies=usd",
        f"{API_CONFIG['binance']['url']}/ticker/price?symbol=BTCUSDT",
        API_CONFIG['blockchain']['url']
    ]
    
    parse_funcs = [
        lambda x: x["bitcoin"]["usd"],
        lambda x: float(x["price"]),
        lambda x: x["USD"]["last"]
    ]
    
    price = fetch_with_fallback(sources, parse_funcs)
    
    if price is None and API_CACHE["btc_price"]["value"]:
        return API_CACHE["btc_price"]["value"]
    
    price = price or 50000
    set_cached_data("btc_price", price)
    return price

def get_usd_rub_rate():
    """–ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å USD/RUB —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    cached = get_cached_data("usd_rub")
    if cached:
        return cached
    
    sources = [
        f"{API_CONFIG['coingecko']['url']}/simple/price?ids=bitcoin&vs_currencies=usd,rub",
        API_CONFIG['cbr']['url'],
        f"{API_CONFIG['binance']['url']}/ticker/price?symbol=USDTRUB"
    ]
    
    parse_funcs = [
        lambda x: x["bitcoin"]["rub"] / x["bitcoin"]["usd"],
        lambda x: 1 / x["rates"]["USD"],
        lambda x: float(x["price"])
    ]
    
    rate = fetch_with_fallback(sources, parse_funcs)
    
    if rate is None and API_CACHE["usd_rub"]["value"]:
        return API_CACHE["usd_rub"]["value"]
    
    rate = rate or 90
    set_cached_data("usd_rub", rate)
    return rate

def get_mining_data_with_retry(hashrate_th, power_w, electricity_cost_usd, retries=3):
    """–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–∞–π–Ω–∏–Ω–≥–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    cached = get_cached_data("mining_data")
    if cached:
        return cached
    
    for attempt in range(retries):
        try:
            params = {
                "hr": hashrate_th,
                "p": power_w,
                "cost": electricity_cost_usd,
                "fee": 1.0,
                "commit": "Calculate"
            }
            response = requests.get("https://whattomine.com/coins/1.json", 
                                 params=params, timeout=10)
            data = response.json()
            result = {
                "daily_profit": float(data["profit"].replace('$', '').replace(',', '')),
                "daily_revenue": float(data["revenue"].replace('$', '').replace(',', ''))
            }
            set_cached_data("mining_data", result)
            return result
        except:
            if attempt == retries - 1:
                return {
                    "daily_profit": 12.50,
                    "daily_revenue": 18.00
                }
            time.sleep(1 * (attempt + 1))

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏ ---
def add_scenario():
    if not st.session_state.scenarios:
        st.session_state.scenarios.append({
            "start": 1,
            "end": 12,
            "reinvest": 50,
            "wallet": 10
        })
    else:
        last_end = st.session_state.scenarios[-1]["end"]
        st.session_state.scenarios.append({
            "start": last_end + 1,
            "end": last_end + 12,
            "reinvest": 50,
            "wallet": 10
        })

def remove_scenario(index):
    st.session_state.scenarios.pop(index)
    # –ü–µ—Ä–µ–Ω—É–º–µ—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å—Ü–µ–Ω–∞—Ä–∏–∏
    for i in range(len(st.session_state.scenarios)):
        if i == 0:
            st.session_state.scenarios[i]["start"] = 1
        else:
            st.session_state.scenarios[i]["start"] = st.session_state.scenarios[i-1]["end"] + 1
        st.session_state.scenarios[i]["end"] = st.session_state.scenarios[i]["start"] + 11

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ ---
def format_number(value, decimals=0, currency="rub"):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –º–µ–∂–¥—É —Ç—ã—Å—è—á–∞–º–∏"""
    if pd.isna(value) or value == 0:
        return "0"
    try:
        if decimals == 0:
            formatted = "{:,.0f}".format(value).replace(",", " ")
        else:
            formatted = "{:,.{}f}".format(value, decimals).replace(",", " ").replace(".", ",")
        
        if currency == "usd":
            return f"${formatted}"
        elif currency == "rub":
            return f"{formatted} ‚ÇΩ"
        return formatted
    except:
        return str(value)

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
st.set_page_config(
    page_title="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–∞–π–Ω–∏–Ω–≥–∞ PRO",
    page_icon="‚õèÔ∏è",
    layout="wide"
)

# –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
tab1, tab2 = st.tabs(["–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"])

with tab1:
    st.title("‚õèÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–∞–π–Ω–∏–Ω–≥–∞ Bitcoin")
    
    # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É - —Ç–µ–ø–µ—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ª–µ–≤–∞, —Ç–∞–±–ª–∏—Ü–∞ —Å–ø—Ä–∞–≤–∞
    col_params, col_results = st.columns([1, 2], gap="large")
    
    with col_params:
        st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è")
        asic_count = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ASIC", min_value=1, value=1)
        asic_hashrate = st.number_input("–•–µ—à—Ä–µ–π—Ç 1 ASIC (TH/s)", min_value=1, value=120)
        asic_power = st.number_input("–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ 1 ASIC (–í—Ç)", min_value=100, value=3600)
        asic_price = st.number_input("–°—Ç–æ–∏–º–æ—Å—Ç—å 1 ASIC ($)", min_value=1, value=500)
        electricity = st.number_input("–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ (—Ä—É–±/–∫–í—Ç¬∑—á)", min_value=1.0, value=6.4)
        
        show_in_usd = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—á–µ—Ç—ã –≤ $", value=False)
        
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã"):
            st.session_state.usd_rub_rate = get_usd_rub_rate()
            st.session_state.btc_price_usd = get_btc_price()
            st.success("–ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        
        usd_rub = get_usd_rub_rate()
        btc_usd = get_btc_price()
        st.metric("–ö—É—Ä—Å USD/RUB", f"{format_number(usd_rub, 2)} ‚ÇΩ")
        st.metric("–¶–µ–Ω–∞ BTC", f"{format_number(btc_usd, 2)} $")

        # –ë–ª–æ–∫ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        st.header("–°—Ü–µ–Ω–∞—Ä–∏–∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏")
        if not st.session_state.scenarios:
            add_scenario()

        for i, scenario in enumerate(st.session_state.scenarios):
            with st.container(border=True):
                cols = st.columns(2)
                with cols[0]:
                    start = st.number_input("–°", min_value=1, value=scenario['start'], 
                                          key=f"start_{i}", step=1)
                with cols[1]:
                    end = st.number_input("–ü–æ", min_value=start, value=scenario['end'], 
                                        key=f"end_{i}", step=1)
                
                reinvest = st.slider("–†–µ–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ %", 0, 100, scenario['reinvest'], 
                                   key=f"reinvest_{i}")
                wallet = st.slider("–ö–æ—à–µ–ª–µ–∫ %", 0, 100, scenario['wallet'], 
                                 key=f"wallet_{i}")
                
                if st.button("‚ùå –£–¥–∞–ª–∏—Ç—å", key=f"remove_{i}"):
                    remove_scenario(i)
                    st.rerun()
                
                st.session_state.scenarios[i] = {
                    "start": start,
                    "end": end,
                    "reinvest": reinvest,
                    "wallet": wallet
                }

        if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥"):
            add_scenario()
            st.rerun()

   # –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ–ø–µ—Ä—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ, –∞ –Ω–µ –≤ –∫–æ–ª–æ–Ω–∫–µ
    if st.button("üîÑ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å", type="primary", use_container_width=True):
        with st.spinner("–í—ã–ø–æ–ª–Ω—è—é —Ä–∞—Å—á–µ—Ç..."):
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            usd_rub = get_usd_rub_rate()
            btc_usd = get_btc_price()
            electricity_usd = electricity / usd_rub
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è 1 ASIC
            mining_data_per_asic = get_mining_data_with_retry(
                asic_hashrate,
                asic_power,
                electricity_usd
            )
            
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ASIC
            daily_profit_per_asic_usd = mining_data_per_asic["daily_profit"]
            daily_cost_per_asic_usd = (asic_power / 1000) * 24 * electricity_usd
            
            daily_profit_per_asic_rub = daily_profit_per_asic_usd * usd_rub
            daily_cost_per_asic_rub = (asic_power / 1000) * 24 * electricity
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            current_asics = asic_count
            savings = 0
            wallet_btc = 0
            results = []
            
            # –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏
            total_investment = asic_count * asic_price * usd_rub
            total_investment_usd = asic_count * asic_price
            cumulative_profit = 0
            break_even_month = None
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            total_months = max(s["end"] for s in st.session_state.scenarios) if st.session_state.scenarios else 12
            
            for month in range(1, total_months + 1):
                # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
                active_scenario = None
                for scenario in st.session_state.scenarios:
                    if scenario["start"] <= month <= scenario["end"]:
                        active_scenario = scenario
                        break
                
                if not active_scenario:
                    continue
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
                reinvest_percent = active_scenario["reinvest"]
                wallet_percent = active_scenario["wallet"]
                
                # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
                profit = daily_profit_per_asic_rub * 30 * current_asics
                cost = daily_cost_per_asic_rub * 30 * current_asics
                
                # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
                to_reinvest = profit * (reinvest_percent / 100)
                salary = profit - to_reinvest
                
                to_wallet = to_reinvest * (wallet_percent / 100)
                to_asics = to_reinvest - to_wallet
                
                savings += to_asics
                btc_amount = to_wallet / usd_rub / btc_usd
                wallet_btc += btc_amount
                
                # –ü–æ–∫—É–ø–∫–∞ ASIC
                new_asics = int(savings // (asic_price * usd_rub))
                if new_asics > 0:
                    current_asics += new_asics
                    savings -= new_asics * asic_price * usd_rub
                
                # –†–∞—Å—á–µ—Ç –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏
                cumulative_profit += profit
                if cumulative_profit >= total_investment and break_even_month is None:
                    break_even_month = month
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –¥–æ–ª–ª–∞—Ä—ã –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ
                if show_in_usd:
                    profit_usd = profit / usd_rub
                    cost_usd = cost / usd_rub
                    salary_usd = salary / usd_rub
                    to_reinvest_usd = to_reinvest / usd_rub
                    to_wallet_usd = to_wallet / usd_rub
                    savings_usd = savings / usd_rub
                    
                    results.append({
                        "–ú–µ—Å—è—Ü": month,
                        "ASIC": current_asics,
                        "–î–æ—Ö–æ–¥—ã": int(profit_usd + cost_usd),
                        "–†–∞—Å—Ö–æ–¥—ã": int(cost_usd),
                        "–ü—Ä–∏–±—ã–ª—å": int(profit_usd),
                        "–ó–∞—Ä–ø–ª–∞—Ç–∞": int(salary_usd),
                        "–†–µ–∏–Ω–≤–µ—Å—Ç": int(to_reinvest_usd),
                        "–í –∫–æ—à–µ–ª–µ–∫": int(to_wallet_usd),
                        "–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è": int(savings_usd),
                        "–ö–æ—à–µ–ª–µ–∫": f"{wallet_btc:.8f} BTC (${format_number(wallet_btc * btc_usd, 2, 'usd')})"
                    })
                else:
                    results.append({
                        "–ú–µ—Å—è—Ü": month,
                        "ASIC": current_asics,
                        "–î–æ—Ö–æ–¥—ã": int(profit + cost),
                        "–†–∞—Å—Ö–æ–¥—ã": int(cost),
                        "–ü—Ä–∏–±—ã–ª—å": int(profit),
                        "–ó–∞—Ä–ø–ª–∞—Ç–∞": int(salary),
                        "–†–µ–∏–Ω–≤–µ—Å—Ç": int(to_reinvest),
                        "–í –∫–æ—à–µ–ª–µ–∫": int(to_wallet),
                        "–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è": int(savings),
                        "–ö–æ—à–µ–ª–µ–∫": f"{wallet_btc:.8f} BTC ({format_number(wallet_btc * btc_usd * usd_rub, 0, 'rub')})"
                    })
            
            # –°–æ–∑–¥–∞–µ–º DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            df = pd.DataFrame(results)
            st.session_state.current_results = df
            st.rerun()

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ø—Ä–∞–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
    with col_results:
        if st.session_state.current_results is not None:
            # –í—ã—á–∏—Å–ª—è–µ–º —Å–≤–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            df = st.session_state.current_results.copy()
            
            # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
            initial_investment = asic_count * asic_price * (usd_rub if not show_in_usd else 1)
            
            # –û–∫—É–ø–∞–µ–º–æ—Å—Ç—å —á–∏—Å—Ç–∞—è (–ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ + –∫–æ—à–µ–ª–µ–∫)
            cumulative_salary_wallet = 0
            clean_break_even_month = None
            for _, row in df.iterrows():
                salary = row['–ó–∞—Ä–ø–ª–∞—Ç–∞']
                wallet_value_str = row['–ö–æ—à–µ–ª–µ–∫'].split('(')[1].split(')')[0].replace('$', '').replace('‚ÇΩ', '').replace(' ', '').replace(',', '.').strip()
                try:
                    wallet_value = float(wallet_value_str)
                except ValueError:
                    wallet_value = 0
                cumulative_salary_wallet += salary + wallet_value
                if cumulative_salary_wallet >= initial_investment and clean_break_even_month is None:
                    clean_break_even_month = row['–ú–µ—Å—è—Ü']
            
            # –û–∫—É–ø–∞–µ–º–æ—Å—Ç—å –≥—Ä—è–∑–Ω–∞—è (–ø–æ –ø—Ä–∏–±—ã–ª–∏)
            cumulative_profit = df['–ü—Ä–∏–±—ã–ª—å'].cumsum()
            dirty_break_even_month = None
            for _, row in df.iterrows():
                if cumulative_profit[row['–ú–µ—Å—è—Ü']-1] >= initial_investment:
                    dirty_break_even_month = row['–ú–µ—Å—è—Ü']
                    break
            
            # –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å –∏ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ
            total_profit = df['–ü—Ä–∏–±—ã–ª—å'].sum()
            total_electricity = df['–†–∞—Å—Ö–æ–¥—ã'].sum()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ —Å–≤–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            summary_data = {
                "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": [
                    "–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", 
                    "–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å —á–∏—Å—Ç–∞—è (–º–µ—Å)", 
                    "–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å –≥—Ä—è–∑–Ω–∞—è (–º–µ—Å)",
                    "–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å",
                    "–°—É–º–º–∞ –∑–∞ —ç–ª–µ–∫—Ç—Ä–∏–∫—É"
                ],
                "–ó–Ω–∞—á–µ–Ω–∏–µ": [
                    format_number(initial_investment, 0, "usd" if show_in_usd else "rub"),
                    clean_break_even_month if clean_break_even_month else "–ù–µ –æ–∫—É–ø–∏–ª–æ—Å—å",
                    dirty_break_even_month if dirty_break_even_month else "–ù–µ –æ–∫—É–ø–∏–ª–æ—Å—å",
                    format_number(total_profit, 0, "usd" if show_in_usd else "rub"),
                    format_number(total_electricity, 0, "usd" if show_in_usd else "rub")
                ]
            }
            summary_df = pd.DataFrame(summary_data)
            st.session_state.current_summary = summary_df.to_dict('records')
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–≤–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            st.dataframe(
                summary_df.style.hide(axis="index"),
                hide_index=True,
                use_container_width=True
            )
            
            st.dataframe(
                df.style.format({
                    "–î–æ—Ö–æ–¥—ã": lambda x: format_number(x, 0, "usd" if show_in_usd else "rub"),
                    "–†–∞—Å—Ö–æ–¥—ã": lambda x: format_number(x, 0, "usd" if show_in_usd else "rub"),
                    "–ü—Ä–∏–±—ã–ª—å": lambda x: format_number(x, 0, "usd" if show_in_usd else "rub"),
                    "–ó–∞—Ä–ø–ª–∞—Ç–∞": lambda x: format_number(x, 0, "usd" if show_in_usd else "rub"),
                    "–†–µ–∏–Ω–≤–µ—Å—Ç": lambda x: format_number(x, 0, "usd" if show_in_usd else "rub"),
                    "–í –∫–æ—à–µ–ª–µ–∫": lambda x: format_number(x, 0, "usd" if show_in_usd else "rub"),
                    "–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è": lambda x: format_number(x, 0, "usd" if show_in_usd else "rub")
                }),
                hide_index=True,
                use_container_width=True,
                height=700,
                column_config={
                    "–ú–µ—Å—è—Ü": st.column_config.NumberColumn(width="small"),
                    "ASIC": st.column_config.NumberColumn(width="small")
                }
            )

            # –§–æ—Ä–º–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            with st.form("save_form"):
                result_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", 
                                          value=f"–†–µ–∑—É–ª—å—Ç–∞—Ç {datetime.now().strftime('%Y-%m-%d %H:%M')}")
                
                if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"):
                    if result_name.strip():
                        if result_name in st.session_state.saved_results:
                            st.error("–†–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                        else:
                            st.session_state.saved_results[result_name] = {
                                "timestamp": datetime.now().isoformat(),
                                "data": st.session_state.current_results.to_dict('records'),
                                "summary": st.session_state.current_summary,
                                "params": {
                                    "asic_count": asic_count,
                                    "asic_hashrate": asic_hashrate,
                                    "asic_power": asic_power,
                                    "asic_price": asic_price,
                                    "electricity": electricity,
                                    "show_in_usd": show_in_usd,
                                    "usd_rub_rate": usd_rub,
                                    "btc_price_usd": btc_usd,
                                    "scenarios": st.session_state.scenarios.copy()
                                }
                            }
                            st.success(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º: {result_name}")
                            st.rerun()
                    else:
                        st.error("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
with tab2:
    st.title("üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ session_state
    if not st.session_state.get('saved_results', {}):
        st.info("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    else:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–ª–æ–≤–∞—Ä—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
        saved_results_copy = st.session_state.saved_results.copy()
        
        for name, data in saved_results_copy.items():
            with st.expander(f"üìå {name} ({data['timestamp']})"):
                st.write("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞:")
                st.json(data["params"])
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–≤–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if "summary" in data:
                    st.write("–°–≤–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
                    summary_df = pd.DataFrame(data["summary"])
                    st.dataframe(
                        summary_df.style.hide(axis="index"),
                        hide_index=True,
                        use_container_width=True
                    )
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º DataFrame
                df = pd.DataFrame(data["data"])
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—É –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                show_in_usd_saved = data["params"].get("show_in_usd", False)
                
                st.dataframe(
                    df.style.format({
                        "–î–æ—Ö–æ–¥—ã": lambda x: format_number(x, 0, "usd" if show_in_usd_saved else "rub"),
                        "–†–∞—Å—Ö–æ–¥—ã": lambda x: format_number(x, 0, "usd" if show_in_usd_saved else "rub"),
                        "–ü—Ä–∏–±—ã–ª—å": lambda x: format_number(x, 0, "usd" if show_in_usd_saved else "rub"),
                        "–ó–∞—Ä–ø–ª–∞—Ç–∞": lambda x: format_number(x, 0, "usd" if show_in_usd_saved else "rub"),
                        "–†–µ–∏–Ω–≤–µ—Å—Ç": lambda x: format_number(x, 0, "usd" if show_in_usd_saved else "rub"),
                        "–í –∫–æ—à–µ–ª–µ–∫": lambda x: format_number(x, 0, "usd" if show_in_usd_saved else "rub"),
                        "–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è": lambda x: format_number(x, 0, "usd" if show_in_usd_saved else "rub")
                    }),
                    hide_index=True,
                    use_container_width=True
                )
                
                if st.button(f"‚ùå –£–¥–∞–ª–∏—Ç—å {name}"):
                    del st.session_state.saved_results[name]
                    st.rerun()